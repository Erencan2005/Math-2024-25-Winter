{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOeowi224BQDljRUznFfmAQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Erencan2005/Math-2024-25-Winter/blob/main/Notebooks_EN/02_Analytic_Geometry/05_Lines/Homework_14.ipynb%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 14. Equations of lines on a plane\n"
      ],
      "metadata": {
        "id": "veaJdu03LHao"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import sympy as sp\n",
        "\n",
        "# 1. Equation of line passing through points A(1, 2) and B(3, 4)\n",
        "def equation_of_line_points(A, B):\n",
        "    x1, y1 = A\n",
        "    x2, y2 = B\n",
        "    m = (y2 - y1) / (x2 - x1)  # slope\n",
        "    b = y1 - m * x1  # y-intercept\n",
        "    return m, b\n",
        "\n",
        "# 2. Equation of line passing through point A(1, 2) and parallel to y = 2x + 3\n",
        "def equation_parallel_to_given_line(point, slope):\n",
        "    x1, y1 = point\n",
        "    b = y1 - slope * x1\n",
        "    return slope, b\n",
        "\n",
        "# 3. Equation of line passing through point A(1, 2) and perpendicular to y = 2x + 3\n",
        "def equation_perpendicular_to_given_line(point, slope):\n",
        "    x1, y1 = point\n",
        "    perpendicular_slope = -1 / slope\n",
        "    b = y1 - perpendicular_slope * x1\n",
        "    return perpendicular_slope, b\n",
        "\n",
        "# 4. Find the intersection point of the lines y = 2x + 3 and y = 3x + 2\n",
        "def intersection_of_lines(slope1, intercept1, slope2, intercept2):\n",
        "    x = (intercept2 - intercept1) / (slope1 - slope2)\n",
        "    y = slope1 * x + intercept1\n",
        "    return x, y\n",
        "\n",
        "# 5. Equation of line passing through point A(1, 2) and parallel to vector [2, 3]\n",
        "def equation_parallel_to_vector(point, vector):\n",
        "    x1, y1 = point\n",
        "    slope = vector[1] / vector[0]\n",
        "    b = y1 - slope * x1\n",
        "    return slope, b\n",
        "\n",
        "# 6. Example of line perpendicular and parallel to y = 2x + 3\n",
        "def perpendicular_and_parallel_lines(slope):\n",
        "    parallel_slope = slope\n",
        "    perpendicular_slope = -1 / slope\n",
        "    return parallel_slope, perpendicular_slope\n",
        "\n",
        "# 7. Distance from point A to the line y = 2x + 3\n",
        "def distance_from_point_to_line(point, slope, intercept):\n",
        "    x1, y1 = point\n",
        "    distance = abs(slope * x1 - y1 + intercept) / np.sqrt(slope**2 + 1)\n",
        "    return distance\n",
        "\n",
        "# 8. Equation of line passing through points A(2, 0) and B(0, 3)\n",
        "def equation_of_line_from_axes_intercepts(A, B):\n",
        "    x1, y1 = A\n",
        "    x2, y2 = B\n",
        "    m = (y2 - y1) / (x2 - x1)\n",
        "    b = y1 - m * x1\n",
        "    return m, b\n",
        "\n",
        "# 9. Angle between the line y = x + 3 and the Ox axis\n",
        "def angle_with_x_axis(slope):\n",
        "    angle = np.arctan(slope) * (180 / np.pi)\n",
        "    return angle\n",
        "\n",
        "# 10. Vector perpendicular to the line x + y + 1 = 0\n",
        "def perpendicular_vector_to_line(coefficients):\n",
        "    a, b, c = coefficients\n",
        "    return np.array([a, b])\n",
        "\n",
        "# Testing the functions with example values\n",
        "A = (1, 2)\n",
        "B = (3, 4)\n",
        "\n",
        "# 1. Equation of line passing through A(1, 2) and B(3, 4)\n",
        "m, b = equation_of_line_points(A, B)\n",
        "print(f\"Equation of line through A(1,2) and B(3,4): y = {m}x + {b}\")\n",
        "\n",
        "# 2. Parallel to y = 2x + 3\n",
        "slope = 2\n",
        "m, b = equation_parallel_to_given_line(A, slope)\n",
        "print(f\"Equation of line parallel to y = 2x + 3 passing through A(1,2): y = {m}x + {b}\")\n",
        "\n",
        "# 3. Perpendicular to y = 2x + 3\n",
        "slope = 2\n",
        "m, b = equation_perpendicular_to_given_line(A, slope)\n",
        "print(f\"Equation of line perpendicular to y = 2x + 3 passing through A(1,2): y = {m}x + {b}\")\n",
        "\n",
        "# 4. Intersection of lines y = 2x + 3 and y = 3x + 2\n",
        "slope1, intercept1 = 2, 3\n",
        "slope2, intercept2 = 3, 2\n",
        "intersection = intersection_of_lines(slope1, intercept1, slope2, intercept2)\n",
        "print(f\"Intersection point of y = 2x + 3 and y = 3x + 2: {intersection}\")\n",
        "\n",
        "# 5. Line parallel to vector [2, 3]\n",
        "vector = [2, 3]\n",
        "m, b = equation_parallel_to_vector(A, vector)\n",
        "print(f\"Equation of line passing through A(1,2) and parallel to vector [2, 3]: y = {m}x + {b}\")\n",
        "\n",
        "# 6. Parallel and perpendicular to y = 2x + 3\n",
        "parallel, perpendicular = perpendicular_and_parallel_lines(2)\n",
        "print(f\"Parallel slope: {parallel}, Perpendicular slope: {perpendicular}\")\n",
        "\n",
        "# 7. Distance from point A(1, 2) to the line y = 2x + 3\n",
        "distance = distance_from_point_to_line(A, 2, 3)\n",
        "print(f\"Distance from point A(1,2) to the line y = 2x + 3: {distance}\")\n",
        "\n",
        "# 8. Equation of line passing through A(2, 0) and B(0, 3)\n",
        "m, b = equation_of_line_from_axes_intercepts((2, 0), (0, 3))\n",
        "print(f\"Equation of line passing through A(2, 0) and B(0, 3): y = {m}x + {b}\")\n",
        "\n",
        "# 9. Angle between the line y = x + 3 and Ox axis\n",
        "angle = angle_with_x_axis(1)\n",
        "print(f\"Angle between y = x + 3 and Ox axis: {angle} degrees\")\n",
        "\n",
        "# 10. Perpendicular vector to the line x + y + 1 = 0\n",
        "vector_perpendicular = perpendicular_vector_to_line([1, 1, 1])\n",
        "print(f\"Perpendicular vector to the line x + y + 1 = 0: {vector_perpendicular}\")\n"
      ],
      "metadata": {
        "id": "umdXq5mOLolZ"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}